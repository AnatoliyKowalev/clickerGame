{"version":3,"sources":["webpack:///./src/components/playersFormEdit/PickPlayerIcon.js"],"names":["PickPlayerIcon","props","stateName","value","sellectedIcons","players","map","player","icon","iconName","setState","state","setPlayerField","index","pickedIcon","iconsModal","checkValidForm","setIconToUsedFunc","color","item","icons","iconsArr","this","className","onClick","pickRandomIcon","faRandom","size","toggleState","isOpen","toggle","key","checkSameIcon","selectIcon","disabled","Component"],"mappings":"63DAoCMA,E,YACJ,WAAYC,GAAO,M,IAAA,O,4FAAA,S,EACjB,K,EAAA,eAAMA,GAAN,G,gDADiB,sBAYL,SAACC,EAAWC,GAAU,MAC9BC,EAAiB,GACrB,OAAQF,GACN,IAAK,aACHE,EAAiB,EAAKH,MAAMI,QAAQC,KAAI,SAAAC,GACtC,GAAIA,EAAOC,KAAM,OAAOD,EAAOC,KAAKC,YAO1C,EAAKC,SAAL,KACK,EAAKC,OADV,OAEGT,EAAYC,IAAiB,EAAKQ,MAAMT,IAF3C,qBAGEE,GAHF,QAxBiB,qBA+BN,SAACI,GACZ,EAAKP,MAAMW,eAAe,EAAKX,MAAMY,MAAO,OAAQL,GACpD,EAAKE,SAAL,KACK,EAAKC,MADV,CAEEG,WAAYN,EACZO,YAAY,KACX,kBAAM,EAAKd,MAAMe,uBArCH,mDAwCF,0GACPC,EAAsB,EAAKhB,MAA3BgB,kBADO,SAETA,EAAkB,EAAKhB,MAAMY,OAFpB,OAGf,EAAKH,SAAL,KACK,EAAKC,MADV,CAEEG,WAAYG,EAAkB,EAAKhB,MAAMY,UACxC,kBAAM,EAAKZ,MAAMe,oBANL,4CAxCE,wBAiDH,SAACR,GACf,IAAIU,EAAQ,QAOZ,OALA,EAAKP,MAAMP,eAAeE,KAAI,SAAAa,GACxBA,GAASA,GAAQX,EAAKC,WACxBS,EAAQ,WAGLA,KAvDP,EAAKP,MAAQ,CACXS,MAAOC,IACPN,YAAY,EACZD,WAAY,KACZV,eAAgB,IAND,E,gSA4DV,aAMHkB,KAAKX,MAJPI,EAFK,EAELA,WACAK,EAHK,EAGLA,MACAN,EAJK,EAILA,WAIF,OARO,EAKLV,eAIA,yBAAKmB,UAAU,eACb,yBAAKA,UAAU,mBAAmBC,QAAS,kBAAM,EAAKC,mBACpD,kBAAC,IAAD,CAAiBjB,KAAMkB,MADzB,UAIA,yBAAKH,UAAU,qBAEXT,EACE,kBAAC,IAAD,CAAiBN,KAAMM,EAAYa,KAAM,OACzC,uBAAGJ,UAAU,eAAb,WAKN,4BAAQC,QAAS,kBAAM,EAAKI,YAAY,gBAAxC,QAEA,kBAAC,IAAD,CAAOC,OAAQd,EACbe,OAAQ,kBAAM,EAAKF,YAAY,gBAG/B,kBAAC,IAAD,CAAaE,OAAQ,kBAAM,EAAKF,YAAY,gBAA5C,aACA,kBAAC,IAAD,KACGR,EAAMd,KAAI,SAACE,EAAMK,GAUhB,OAAO,4BACLkB,IAAKlB,EACLU,UAAU,WACVL,MAAO,EAAKc,cAAcxB,GAC1BgB,QAAS,kBAAM,EAAKS,WAAWzB,IAC/B0B,SAC8B,QAA5B,EAAKF,cAAcxB,IAGrB,kBAAC,IAAD,CAGEA,KAAMA,EACNmB,KAAM,mB,8BAnHKQ,aAkIdnC","file":"16.index_bundle.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  faCat,\r\n  faCrow,\r\n  faGhost,\r\n  faSkullCrossbones,\r\n  faSpider,\r\n  faDog,\r\n  faDove,\r\n  faDragon,\r\n  faFish,\r\n  faFrog,\r\n  faHorse,\r\n  faOtter,\r\n  faAngry,\r\n  faBaby,\r\n  faBlind,\r\n  faBug,\r\n  faDizzy,\r\n  faFemale,\r\n  faFlushed,\r\n  faFrown,\r\n  faGrimace,\r\n  faGrin,\r\n  faGrinBeam,\r\n  faGrinHearts,\r\n  faGrinTongueSquint,\r\n  faGrinTongueWink,\r\n  //======>\r\n  faRandom\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { isEmpty } from 'lodash';\r\nimport { iconsArr, genereateRandomNumber } from '../../utils/constants';\r\n\r\nclass PickPlayerIcon extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      icons: iconsArr,\r\n      iconsModal: false,\r\n      pickedIcon: null,\r\n      sellectedIcons: []\r\n    }\r\n  }\r\n\r\n\r\n\r\n  toggleState = (stateName, value) => {\r\n    let sellectedIcons = [];\r\n    switch (stateName) {\r\n      case 'iconsModal':\r\n        sellectedIcons = this.props.players.map(player => {\r\n          if (player.icon) return player.icon.iconName\r\n        })\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      [stateName]: value ? value : !this.state[stateName],\r\n      sellectedIcons\r\n    })\r\n  }\r\n\r\n  selectIcon = (icon) => {\r\n    this.props.setPlayerField(this.props.index, 'icon', icon)\r\n    this.setState({\r\n      ...this.state,\r\n      pickedIcon: icon,\r\n      iconsModal: false\r\n    }, () => this.props.checkValidForm())\r\n  }\r\n\r\n  pickRandomIcon = async () => {\r\n    const { setIconToUsedFunc } = this.props;\r\n    await setIconToUsedFunc(this.props.index)\r\n    this.setState({\r\n      ...this.state,\r\n      pickedIcon: setIconToUsedFunc(this.props.index),\r\n    }, () => this.props.checkValidForm())\r\n  }\r\n\r\n  checkSameIcon = (icon) => {\r\n    let color = 'black';\r\n\r\n    this.state.sellectedIcons.map(item => {\r\n      if (item && (item == icon.iconName)) {\r\n        color = 'gray'\r\n      }\r\n    })\r\n    return color;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      iconsModal,\r\n      icons,\r\n      pickedIcon,\r\n      sellectedIcons\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className='icon-picker'>\r\n        <div className=\"random-hero-pick\" onClick={() => this.pickRandomIcon()}>\r\n          <FontAwesomeIcon icon={faRandom} />\r\n          random\r\n        </div>\r\n        <div className=\"icon-picker__icon\">\r\n          {\r\n            pickedIcon ?\r\n              <FontAwesomeIcon icon={pickedIcon} size={'2x'} /> :\r\n              <p className=\"text-center\">\r\n                '.__.'\r\n              </p>\r\n          }\r\n        </div>\r\n        <button onClick={() => this.toggleState('iconsModal')} >pick</button>\r\n\r\n        <Modal isOpen={iconsModal}\r\n          toggle={() => this.toggleState('iconsModal')}\r\n        >\r\n\r\n          <ModalHeader toggle={() => this.toggleState('iconsModal')}>Pick icon</ModalHeader>\r\n          <ModalBody>\r\n            {icons.map((icon, index) => {\r\n\r\n              // sellectedIcons.length && sellectedIcons.map(item => {\r\n              //   // if (item = icon) {\r\n              //   //   color = 'gray'\r\n              //   // } else {\r\n              //   //   color = 'black'\r\n              //   // }\r\n              // })\r\n\r\n              return <button\r\n                key={index}\r\n                className=\"btn-icon\"\r\n                color={this.checkSameIcon(icon)}\r\n                onClick={() => this.selectIcon(icon)}\r\n                disabled={\r\n                  this.checkSameIcon(icon) == 'gray' ? true : false\r\n                }\r\n              >\r\n                <FontAwesomeIcon\r\n\r\n\r\n                  icon={icon}\r\n                  size={'3x'}\r\n\r\n\r\n                />\r\n              </button>\r\n\r\n            })}\r\n\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PickPlayerIcon;"],"sourceRoot":""}